% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/stat-multcomp.R
\name{stat_multcomp}
\alias{stat_multcomp}
\title{Multiple comparisons}
\usage{
stat_multcomp(
  mapping = NULL,
  data = NULL,
  geom = "text_pairwise",
  position = "identity",
  ...,
  formula = NULL,
  method = "lm",
  method.args = list(),
  max.main.p.value = 0.05,
  small.p = FALSE,
  p.digits = 3,
  label.y = NULL,
  vstep = 0,
  output.type = NULL,
  na.rm = FALSE,
  orientation = NA,
  parse = NULL,
  show.legend = FALSE,
  inherit.aes = TRUE
)
}
\arguments{
\item{mapping}{The aesthetic mapping, usually constructed with
\code{\link[ggplot2]{aes}}. Only needs to be
set at the layer level if you are overriding the plot defaults.}

\item{data}{A layer specific dataset, only needed if you want to override
the plot defaults.}

\item{geom}{The geometric object to use display the data.}

\item{position}{The position adjustment to use for overlapping points on this
layer.}

\item{...}{other arguments passed on to \code{\link[ggplot2]{layer}}. This
can include aesthetics whose values you want to set, not map. See
\code{\link[ggplot2]{layer}} for more details.}

\item{formula}{a formula object. Using aesthetic names \code{x} and \code{y}
instead of original variable names.}

\item{method}{function or character If character, "lm", "rlm" or the name of
a model fit function are accepted, possibly followed by the fit function's
\code{method} argument separated by a colon (e.g. \code{"rlm:M"}). If a
function different to \code{lm()}, it must accept as a minimum a model
formula through its first parameter, and have formal parameters named
\code{data}, \code{weights}, and \code{method}, and return a model fit
object accepted by function \code{glht()}.}

\item{method.args}{named list with additional arguments.}

\item{max.main.p.value}{numeric [0..1] The P-value for the main effect of _x_
in ANOVA test above which no pairwise comparisons are run or labels
generated.}

\item{small.p}{logical Flags to switch use of lower case p for
p-value.}

\item{p.digits}{integer Number of digits after the decimal point to
use for \eqn{R^2} and P-value in labels.}

\item{label.y}{\code{numeric} in native data units. If too short they will
be recycled.}

\item{vstep}{numeric in native data units, the vertical step
used between labels for comparisons.}

\item{output.type}{character One of "expression", "LaTeX", "text",
"markdown" or "numeric".}

\item{na.rm}{a logical indicating whether NA values should be stripped before
the computation proceeds.}

\item{orientation}{character Either "x" or "y" controlling the default for
\code{formula}.}

\item{parse}{logical Passed to the geom. If \code{TRUE}, the labels will be
parsed into expressions and displayed as described in \code{?plotmath}.
Default is \code{TRUE} if \code{output.type = "expression"} and
\code{FALSE} otherwise.}

\item{show.legend}{logical. Should this layer be included in the legends?
\code{NA}, the default, includes if any aesthetics are mapped. \code{FALSE}
never includes, and \code{TRUE} always includes.}

\item{inherit.aes}{If \code{FALSE}, overrides the default aesthetics, rather
than combining with them.}
}
\value{
A data frame, with one row per comparison and columns as described
  under \strong{Computed variables}.
}
\description{
\code{stat_multcomp} fits a linear model by default with \code{stats::lm()} but
alternatively using other model fit functions. The model is passed to
function \code{glht()} from package 'multcomp' to fit Tukey contrasts and generates
labels for \emph{P}-values.
}
\details{
This statistic can be used to automatically annotate a plot with
  \emph{P}-values for multiple comparison tests. The explanatory variable
  must be a factor as this creates a grouping. This statistic
  generates labels as R expressions by default but LaTeX (use TikZ device),
  markdown (use package 'ggtext') and plain text are also supported, as well
  as numeric values for user-generated text labels. The value of \code{parse}
  is set automatically based on \code{output-type}, but if you assemble
  labels that need parsing from \code{numeric} output, the default needs to
  be overridden. This stat only generates annotation labels and segments
  connecting the compared factor levels.

  A ggplot statistic receives as \code{data} a data frame that is not the one
  passed as argument by the user, but instead a data frame with the variables
  mapped to aesthetics.
}
\note{
R option \code{OutDec} is obeyed based on its value at the time the plot
  is rendered, i.e., displayed or printed. Set \code{options(OutDec = ",")}
  for languages like Spanish or French.
}
\section{Aesthetics}{
 \code{stat_multcomp()} understands \code{x} and
  \code{y}, to be referenced in the \code{formula} and \code{weight} passed
  as argument to parameter \code{weights}. A factor must be mapped to
  \code{x} and \code{numeric} variables to \code{y}, and if used to
  \code{weight}. In addition, the aesthetics understood by the geom
  (\code{"text_pairwuse"} is the default) are understood and grouping
  respected.
}

\section{Computed variables}{

If output.type different from \code{"numeric"} the returned tibble contains
columns listed below. If the model fit function used does not return a value,
the label is set to \code{character(0L)}.
\describe{
  \item{xmin,xmax}{x position}
  \item{y}{y position}
  \item{p.value.label}{P-value for the F-value above.}
  \item{method.label}{Set according \code{method} used.}
  \item{p.value, n}{numeric values, from glht object}}

If output.type is \code{"numeric"} the returned data frame lacks the labels.

To explore the computed values returned for a given input we suggest the use
of \code{\link[gginnards]{geom_debug}} as shown in the last examples below.
}

\section{Alternatives}{
 \code{stat_signif()} in package 'ggsignif' is
  an earlier and independent implementation of pairwise tests.
}

\seealso{
This statistic uses the implementation of Tests of General Linear
  Hypotheses in function \code{\link[multcomp]{glht}}.

Other ggplot statistics for linear and polynomial regression: 
\code{\link{stat_poly_eq}()},
\code{\link{stat_poly_line}()}
}
\concept{ggplot statistics for linear and polynomial regression}
