% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/stat-peaks.R
\name{find_peaks}
\alias{find_peaks}
\title{Find local maxima or global maximum (peaks)}
\usage{
find_peaks(
  x,
  global.threshold = 0,
  local.threshold = 0,
  local.reference = "minimum",
  span = 3,
  strict = FALSE,
  na.rm = FALSE
)
}
\arguments{
\item{x}{numeric vector. Hint: to find valleys, change the sign of the
argument with the unary operator \code{-}.}

\item{global.threshold}{numeric A value between 0.0 and 1.0 indicating the
\emph{global} height (depth) threshold below which peaks (valleys) will be
ignored, or a negative value, between 0.0 and -1.0 indicating the
\emph{global} height (depth) threshold above which peaks (valleys) will be
ignored. These values are relative to the range of \code{x}.}

\item{local.threshold}{numeric A value between 0.0 and 1.0 indicating the
\emph{within-window} height (depth) threshold below which peaks (valleys)
will be ignored. This value is relative to the range of \code{x}.}

\item{local.reference}{character One of \code{"minimum"} (eqv.
\code{"maximum"}) or \code{"median"}. The reference used to assess the
height of the peak, either the minimum (maximum) value within the window or
the median of all values in the window.}

\item{span}{odd integer A peak is defined as an element in a sequence which
is greater than all other elements within a moving window of width
\code{span} centred at that element. The default value is 3, meaning that a
peak is bigger than both of its neighbours. \code{span = NULL} extends the
span to the whole length of \code{x}.}

\item{strict}{logical flag: if TRUE, an element must be strictly greater than
all other values in its window to be considered a peak. Default: TRUE.}

\item{na.rm}{logical indicating whether \code{NA} values should be stripped
before searching for peaks.}
}
\value{
A vector of logical values. Values that are TRUE correspond to local
  peaks in vector \code{x} and can be used to extract the rows corresponding
  to peaks from a data frame.
}
\description{
This function finds peaks (local maxima) in a vector, using a user selectable
span and size threshold relative to the tallest peak (global maximum).
}
\details{
This function is a wrapper built onto function
  \code{\link[splus2R]{peaks}} from \pkg{splus2R} and handles non-finite
  (including NA) values differently than \code{peaks}, instead of giving an
  error when \code{na.rm = FALSE} and \code{x} contains \code{NA} values,
  \code{NA} values are replaced with the smallest finite value in \code{x}.
  \code{span = NULL} is treated as a special case and returns \code{max(x)}.
  Two tests are optional, one based on the absolute height of the peaks
  (\code{global.threshold}) and another based on the height of the peaks
  compared to other values within the window of width equal to \code{span}
  (\code{local.threshold}). The reference value used within each window
  containing a peak is given by \code{local.reference}.
}
\note{
The default for parameter \code{strict} is \code{FALSE} in functions
  \code{peaks()} and \code{find_peaks()}, as in \code{stat_peaks()} and in
  \code{stat_valleys()}, while the default in \code{\link[splus2R]{peaks}}
  is \code{strict = TRUE}.
}
\examples{
# lynx is a time.series object
lynx_num.df <-
  try_tibble(lynx,
             col.names = c("year", "lynx"),
             as.numeric = TRUE) # years -> as numeric

which(find_peaks(lynx_num.df$lynx, span = 31))
lynx_num.df[find_peaks(lynx_num.df$lynx, span = 15), ]
lynx_num.df[find_peaks(lynx_num.df$lynx, span = NULL), ]
lynx_num.df[find_peaks(lynx_num.df$lynx,
                       span = 31,
                       global.threshold = 0.75), ]

lynx_datetime.df <-
   try_tibble(lynx,
              col.names = c("year", "lynx")) # years -> POSIXct

which(find_peaks(lynx_datetime.df$lynx, span = 31))
lynx_datetime.df[find_peaks(lynx_datetime.df$lynx, span = 31), ]
lynx_datetime.df[find_peaks(lynx_datetime.df$lynx,
                            span = 31,
                            global.threshold = 0.75), ]

}
\seealso{
\code{\link[splus2R]{peaks}}

Other peaks and valleys functions: 
\code{\link{find_spikes}()}
}
\concept{peaks and valleys functions}
